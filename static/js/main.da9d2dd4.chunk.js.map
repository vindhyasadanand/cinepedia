{"version":3,"sources":["movieCard.js","SearchMovies.js","App.js","reportWebVitals.js","index.js"],"names":["MovieCard","movie","className","src","poster_path","alt","title","release_date","vote_average","overview","SearchMovies","useState","query","setQuery","movies","setMovies","searchMovies","e","a","preventDefault","url","fetch","res","json","data","results","console","error","onSubmit","htmlFor","type","name","placeholder","value","onChange","target","filter","map","id","App","class","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yOAEe,SAASA,EAAT,GAA4B,IAARC,EAAO,EAAPA,MAC/B,OACK,sBAAKC,UAAU,OAAf,UACG,qBAAKA,UAAU,cACXC,IAAG,0DAAqDF,EAAMG,aAC9DC,IAAKJ,EAAMK,MAAQ,YAEvB,sBAAKJ,UAAU,gBAAf,UACA,oBAAIA,UAAU,cAAd,SAA6BD,EAAMK,QACnC,4BAAG,mDAAsBL,EAAMM,kBAC/B,4BAAG,6CAAgBN,EAAMO,kBACzB,mBAAGN,UAAU,aAAb,SAA2BD,EAAMQ,iBCX9B,SAASC,IAGpB,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAEA,EAA4BF,mBAAS,IAArC,mBAAOG,EAAP,KAAeC,EAAf,KAEMC,EAAY,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,6DACjBD,EAAEE,iBAEIC,EAHW,kHAGsGR,EAHtG,iDAMKS,MAAMD,GANX,cAMPE,EANO,gBAOOA,EAAIC,OAPX,OAOPC,EAPO,OAQbT,EAAUS,EAAKC,SARF,kDAUbC,QAAQC,MAAR,MAVa,0DAAH,sDAclB,OACI,qCACI,uBAAMzB,UAAU,OAAO0B,SAAUZ,EAAjC,UACI,uBAAOd,UAAU,QAAQ2B,QAAQ,QAAjC,wBACA,uBAAO3B,UAAU,QAAQ4B,KAAK,OAAOC,KAAK,QACtCC,YAAY,qBACZC,MAAOrB,EAAOsB,SAAU,SAACjB,GAAD,OAAOJ,EAASI,EAAEkB,OAAOF,UAErD,wBAAQ/B,UAAU,SAAS4B,KAAK,SAAhC,uBAEJ,qBAAK5B,UAAU,YAAf,SACKY,EAAOsB,QAAO,SAAAnC,GAAK,OAAIA,EAAMG,eAAaiC,KAAI,SAAApC,GAAK,OACjD,cAACD,EAAD,CAAWC,MAAOA,GAAYA,EAAMqC,Y,MCtBxCC,MAVf,WACE,OAEE,sBAAKC,MAAM,YAAX,UACE,oBAAItC,UAAU,QAAd,gCACA,cAACQ,EAAD,QCIS+B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.da9d2dd4.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function MovieCard({movie}){\r\n    return (\r\n         <div className=\"card\"  >\r\n            <img className=\"card--image\"\r\n                src={`https://image.tmdb.org/t/p/w185_and_h278_bestv2/${movie.poster_path}`}\r\n                alt={movie.title + ' poster'}\r\n                />\r\n            <div className=\"card--content\">\r\n            <h3 className=\"card--title\">{movie.title}</h3>\r\n            <p><small>RELEASE DATE: {movie.release_date}</small></p>\r\n            <p><small>RATING: {movie.vote_average}</small></p>\r\n            <p className=\"card--desc\">{movie.overview}</p>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}","import React, {useState} from \"react\";\r\nimport MovieCard from './movieCard.js';\r\nexport default function SearchMovies(){\r\n    \r\n    //states- input query, movies\r\n    const [query, setQuery] = useState('');\r\n    //create the state for movies, and update that state appropriate\r\n    const [movies, setMovies] = useState([]);\r\n    \r\n    const searchMovies = async (e) => {\r\n        e.preventDefault();\r\n                \r\n        const url = `https://api.themoviedb.org/3/search/movie?api_key=5dcf7f28a88be0edc01bbbde06f024ab&language=en-US&query=${query}&page=1&include_adult=false`;\r\n        \r\n        try {\r\n            const res = await fetch(url);\r\n            const data  = await res.json();\r\n            setMovies(data.results);\r\n        }catch(err){\r\n            console.error(err);\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <>\r\n            <form className=\"form\" onSubmit={searchMovies}>\r\n                <label className=\"label\" htmlFor=\"query\">Movie Name</label>\r\n                <input className=\"input\" type=\"text\" name=\"query\"\r\n                    placeholder=\"i.e. Jurassic Park\"\r\n                    value={query} onChange={(e) => setQuery(e.target.value)}\r\n                    />\r\n                <button className=\"button\" type=\"submit\">Search</button>\r\n            </form>\r\n            <div className=\"card-list\">\r\n                {movies.filter(movie => movie.poster_path).map(movie => (\r\n                   <MovieCard movie={movie} key={movie.id} />\r\n                ))}\r\n            </div>    \r\n        </>\r\n    )\r\n}","import SearchMovies from './SearchMovies' \nimport './App.css';\n\nfunction App() {\n  return (\n    \n    <div class=\"container\">\n      <h1 className=\"title\">React Movie Search</h1>\n      <SearchMovies/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}